{"version":3,"sources":["../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","headers","Authorization","getAuthorization","jsonData","options","targets","buildQueryParameters","length","when","data","doRequest","method","then","response","status","message","title","datasourceRequest","_","map","target","refId","alias","generateAlias","sql","generateSql","input","_keyStr","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","i","charCodeAt","isNaN","charAt","defaultUser","user","defaultPassword","password","encode","replace","scopedVars","queryStart","range","from","toISOString","queryEnd","to","intervalMs","query","req","res","tempList","Array","isArray","forEach","item","datapoints","end","push","expendable","text","value"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.headers = { \"Content-Type\": \"application/json\" };\n    this.headers.Authorization = this.getAuthorization(\n      instanceSettings.jsonData\n    );\n  }\n\n  query(options) {\n    var targets = this.buildQueryParameters(options);\n\n    if (targets.length <= 0) {\n      return this.q.when({ data: [] });\n    }\n\n    return this.doRequest({\n      url: this.url + \"/grafana/query\",\n      data: targets,\n      method: \"POST\",\n    });\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + \"/grafana/heartbeat\",\n      method: \"GET\",\n    }).then((response) => {\n      if (response.status === 200) {\n        return {\n          status: \"success\",\n          message: \"TDengine Data source is working\",\n          title: \"Success\",\n        };\n      }\n    });\n  }\n\n  doRequest(options) {\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    var targets = _.map(options.targets, (target) => {\n      return {\n        refId: target.refId,\n        alias: this.generateAlias(options, target),\n        sql: this.generateSql(options, target),\n      };\n    });\n\n    return targets;\n  }\n\n  encode(input) {\n    var _keyStr =\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    var output = \"\";\n    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n    var i = 0;\n    while (i < input.length) {\n      chr1 = input.charCodeAt(i++);\n      chr2 = input.charCodeAt(i++);\n      chr3 = input.charCodeAt(i++);\n      enc1 = chr1 >> 2;\n      enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n      enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n      enc4 = chr3 & 63;\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n      output =\n        output +\n        _keyStr.charAt(enc1) +\n        _keyStr.charAt(enc2) +\n        _keyStr.charAt(enc3) +\n        _keyStr.charAt(enc4);\n    }\n\n    return output;\n  }\n\n  getAuthorization(jsonData) {\n    jsonData = jsonData || {};\n    var defaultUser = jsonData.user || \"root\";\n    var defaultPassword = jsonData.password || \"taosdata\";\n\n    return \"Basic \" + this.encode(defaultUser + \":\" + defaultPassword);\n  }\n\n  generateAlias(options, target) {\n    var alias = target.alias || \"\";\n    alias = this.templateSrv.replace(alias, options.scopedVars, \"csv\");\n    return alias;\n  }\n\n  generateSql(options, target) {\n    var sql = target.sql;\n    if (sql == null || sql == \"\") {\n      return sql;\n    }\n\n    var queryStart = \"now-1h\";\n    if (\n      options != null &&\n      options.range != null &&\n      options.range.from != null\n    ) {\n      queryStart = options.range.from.toISOString();\n    }\n\n    var queryEnd = \"now\";\n    if (options != null && options.range != null && options.range.to != null) {\n      queryEnd = options.range.to.toISOString();\n    }\n    var intervalMs = options.intervalMs || \"20000\";\n\n    intervalMs += \"a\";\n    sql = sql.replace(/^\\s+|\\s+$/gm, \"\");\n    sql = sql.replace(\"$from\", \"'\" + queryStart + \"'\");\n    sql = sql.replace(\"$begin\", \"'\" + queryStart + \"'\");\n    sql = sql.replace(\"$to\", \"'\" + queryEnd + \"'\");\n    sql = sql.replace(\"$end\", \"'\" + queryEnd + \"'\");\n    sql = sql.replace(\"$interval\", intervalMs);\n\n    sql = this.templateSrv.replace(sql, options.scopedVars, \"csv\");\n    return sql;\n  }\n  metricFindQuery(query, options) {\n    const targets = [\n      {\n        alias: \"\",\n        refId: \"A\",\n        sql: this.templateSrv.replace(query, options.scopedVars, \"csv\"),\n      },\n    ];\n    let req = {\n      url: this.url + \"/grafana/query\",\n      data: targets,\n      method: \"POST\",\n    };\n    return this.doRequest(req).then((res) => {\n      let tempList = [];\n      (Array.isArray(res.data) ? res.data : []).forEach((item) => {\n        (Array.isArray(item.datapoints) ? item.datapoints : []).forEach(\n          (end) => {\n            tempList.push({\n              expendable: false,\n              text: end[0],\n              value: end[0],\n            });\n          }\n        );\n      });\n      return tempList;\n    });\n  }\n}\n"]}